// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package dispatch

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type RescodeType int64

const (
	RescodeType_RES_SUCCESS           RescodeType = 0
	RescodeType_RES_DEFAULT_EXCEPTION RescodeType = 1
	RescodeType_RES_PARAM_ERROR       RescodeType = 2
)

func (p RescodeType) String() string {
	switch p {
	case RescodeType_RES_SUCCESS:
		return "RES_SUCCESS"
	case RescodeType_RES_DEFAULT_EXCEPTION:
		return "RES_DEFAULT_EXCEPTION"
	case RescodeType_RES_PARAM_ERROR:
		return "RES_PARAM_ERROR"
	}
	return "<UNSET>"
}

func RescodeTypeFromString(s string) (RescodeType, error) {
	switch s {
	case "RES_SUCCESS":
		return RescodeType_RES_SUCCESS, nil
	case "RES_DEFAULT_EXCEPTION":
		return RescodeType_RES_DEFAULT_EXCEPTION, nil
	case "RES_PARAM_ERROR":
		return RescodeType_RES_PARAM_ERROR, nil
	}
	return RescodeType(0), fmt.Errorf("not a valid RescodeType string")
}

func RescodeTypePtr(v RescodeType) *RescodeType { return &v }

func (p RescodeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RescodeType) UnmarshalText(text []byte) error {
	q, err := RescodeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RescodeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RescodeType(v)
	return nil
}

func (p *RescodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - WhatOp
//  - Why
type DispatchThriftException struct {
	WhatOp int32  `thrift:"whatOp,1" db:"whatOp" json:"whatOp"`
	Why    string `thrift:"why,2" db:"why" json:"why"`
}

func NewDispatchThriftException() *DispatchThriftException {
	return &DispatchThriftException{}
}

func (p *DispatchThriftException) GetWhatOp() int32 {
	return p.WhatOp
}

func (p *DispatchThriftException) GetWhy() string {
	return p.Why
}
func (p *DispatchThriftException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchThriftException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WhatOp = v
	}
	return nil
}

func (p *DispatchThriftException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Why = v
	}
	return nil
}

func (p *DispatchThriftException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DispatchThriftException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchThriftException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("whatOp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:whatOp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.WhatOp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.whatOp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:whatOp: ", p), err)
	}
	return err
}

func (p *DispatchThriftException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err)
	}
	if err := oprot.WriteString(string(p.Why)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err)
	}
	return err
}

func (p *DispatchThriftException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchThriftException(%+v)", *p)
}

func (p *DispatchThriftException) Error() string {
	return p.String()
}

// Attributes:
//  - UID
//  - Cv
//  - Proto
//  - IP
//  - Atom
type PublishRequest struct {
	UID   int64  `thrift:"uid,1" db:"uid" json:"uid"`
	Cv    string `thrift:"cv,2" db:"cv" json:"cv"`
	Proto int16  `thrift:"proto,3" db:"proto" json:"proto"`
	IP    string `thrift:"ip,4" db:"ip" json:"ip"`
	Atom  string `thrift:"atom,5" db:"atom" json:"atom"`
}

func NewPublishRequest() *PublishRequest {
	return &PublishRequest{}
}

func (p *PublishRequest) GetUID() int64 {
	return p.UID
}

func (p *PublishRequest) GetCv() string {
	return p.Cv
}

func (p *PublishRequest) GetProto() int16 {
	return p.Proto
}

func (p *PublishRequest) GetIP() string {
	return p.IP
}

func (p *PublishRequest) GetAtom() string {
	return p.Atom
}
func (p *PublishRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PublishRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *PublishRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cv = v
	}
	return nil
}

func (p *PublishRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Proto = v
	}
	return nil
}

func (p *PublishRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *PublishRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Atom = v
	}
	return nil
}

func (p *PublishRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublishRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PublishRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *PublishRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cv", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cv: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cv)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cv (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cv: ", p), err)
	}
	return err
}

func (p *PublishRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("proto", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:proto: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Proto)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.proto (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:proto: ", p), err)
	}
	return err
}

func (p *PublishRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *PublishRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("atom", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:atom: ", p), err)
	}
	if err := oprot.WriteString(string(p.Atom)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.atom (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:atom: ", p), err)
	}
	return err
}

func (p *PublishRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishRequest(%+v)", *p)
}

// Attributes:
//  - Liveid
//  - Slot
//  - Incr
//  - Extra
type LinkSlotRequest struct {
	Liveid int64  `thrift:"liveid,1" db:"liveid" json:"liveid"`
	Slot   int16  `thrift:"slot,2" db:"slot" json:"slot"`
	Incr   int16  `thrift:"incr,3" db:"incr" json:"incr"`
	Extra  string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewLinkSlotRequest() *LinkSlotRequest {
	return &LinkSlotRequest{}
}

func (p *LinkSlotRequest) GetLiveid() int64 {
	return p.Liveid
}

func (p *LinkSlotRequest) GetSlot() int16 {
	return p.Slot
}

func (p *LinkSlotRequest) GetIncr() int16 {
	return p.Incr
}

func (p *LinkSlotRequest) GetExtra() string {
	return p.Extra
}
func (p *LinkSlotRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LinkSlotRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Liveid = v
	}
	return nil
}

func (p *LinkSlotRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Slot = v
	}
	return nil
}

func (p *LinkSlotRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Incr = v
	}
	return nil
}

func (p *LinkSlotRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Extra = v
	}
	return nil
}

func (p *LinkSlotRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkSlotRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LinkSlotRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("liveid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:liveid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Liveid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.liveid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:liveid: ", p), err)
	}
	return err
}

func (p *LinkSlotRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slot", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:slot: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Slot)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.slot (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:slot: ", p), err)
	}
	return err
}

func (p *LinkSlotRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("incr", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:incr: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Incr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.incr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:incr: ", p), err)
	}
	return err
}

func (p *LinkSlotRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extra)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extra (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *LinkSlotRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkSlotRequest(%+v)", *p)
}

// Attributes:
//  - Liveid
//  - Extra
type LinkAddrRequest struct {
	Liveid int64  `thrift:"liveid,1" db:"liveid" json:"liveid"`
	Extra  string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewLinkAddrRequest() *LinkAddrRequest {
	return &LinkAddrRequest{}
}

func (p *LinkAddrRequest) GetLiveid() int64 {
	return p.Liveid
}

func (p *LinkAddrRequest) GetExtra() string {
	return p.Extra
}
func (p *LinkAddrRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LinkAddrRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Liveid = v
	}
	return nil
}

func (p *LinkAddrRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Extra = v
	}
	return nil
}

func (p *LinkAddrRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkAddrRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LinkAddrRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("liveid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:liveid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Liveid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.liveid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:liveid: ", p), err)
	}
	return err
}

func (p *LinkAddrRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extra)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extra (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err)
	}
	return err
}

func (p *LinkAddrRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkAddrRequest(%+v)", *p)
}

// Attributes:
//  - URL
//  - SlotUrls
//  - Extra
type StreamPullAddrRequest struct {
	URL      string   `thrift:"url,1" db:"url" json:"url"`
	SlotUrls []string `thrift:"slot_urls,2" db:"slot_urls" json:"slot_urls"`
	Extra    string   `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewStreamPullAddrRequest() *StreamPullAddrRequest {
	return &StreamPullAddrRequest{}
}

func (p *StreamPullAddrRequest) GetURL() string {
	return p.URL
}

func (p *StreamPullAddrRequest) GetSlotUrls() []string {
	return p.SlotUrls
}

func (p *StreamPullAddrRequest) GetExtra() string {
	return p.Extra
}
func (p *StreamPullAddrRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StreamPullAddrRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *StreamPullAddrRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SlotUrls = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.SlotUrls = append(p.SlotUrls, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StreamPullAddrRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Extra = v
	}
	return nil
}

func (p *StreamPullAddrRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StreamPullAddrRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StreamPullAddrRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
	}
	return err
}

func (p *StreamPullAddrRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slot_urls", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:slot_urls: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SlotUrls)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SlotUrls {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:slot_urls: ", p), err)
	}
	return err
}

func (p *StreamPullAddrRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extra)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extra (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err)
	}
	return err
}

func (p *StreamPullAddrRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamPullAddrRequest(%+v)", *p)
}

// Attributes:
//  - Addr
type SlotAddr struct {
	Addr string `thrift:"addr,1" db:"addr" json:"addr"`
}

func NewSlotAddr() *SlotAddr {
	return &SlotAddr{}
}

func (p *SlotAddr) GetAddr() string {
	return p.Addr
}
func (p *SlotAddr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SlotAddr) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Addr = v
	}
	return nil
}

func (p *SlotAddr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SlotAddr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SlotAddr) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addr", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addr: ", p), err)
	}
	return err
}

func (p *SlotAddr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SlotAddr(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Addrs
type StreamPullAddrResponse struct {
	Rescode int32       `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Addrs   []*SlotAddr `thrift:"addrs,2" db:"addrs" json:"addrs"`
}

func NewStreamPullAddrResponse() *StreamPullAddrResponse {
	return &StreamPullAddrResponse{}
}

func (p *StreamPullAddrResponse) GetRescode() int32 {
	return p.Rescode
}

func (p *StreamPullAddrResponse) GetAddrs() []*SlotAddr {
	return p.Addrs
}
func (p *StreamPullAddrResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StreamPullAddrResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rescode = v
	}
	return nil
}

func (p *StreamPullAddrResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SlotAddr, 0, size)
	p.Addrs = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &SlotAddr{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Addrs = append(p.Addrs, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StreamPullAddrResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StreamPullAddrResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StreamPullAddrResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *StreamPullAddrResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addrs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addrs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addrs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Addrs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addrs: ", p), err)
	}
	return err
}

func (p *StreamPullAddrResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamPullAddrResponse(%+v)", *p)
}

// Attributes:
//  - UID
type UserSettingRequest struct {
	UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewUserSettingRequest() *UserSettingRequest {
	return &UserSettingRequest{}
}

func (p *UserSettingRequest) GetUID() int64 {
	return p.UID
}
func (p *UserSettingRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserSettingRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *UserSettingRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserSettingRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserSettingRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *UserSettingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSettingRequest(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Link
//  - PublishPre
//  - PublishSuf
//  - StreamPre
//  - StreamSuf
//  - Extra
type PublishAddrResponse struct {
	Rescode    int64  `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Link       int16  `thrift:"link,2" db:"link" json:"link"`
	PublishPre string `thrift:"publish_pre,3" db:"publish_pre" json:"publish_pre"`
	PublishSuf string `thrift:"publish_suf,4" db:"publish_suf" json:"publish_suf"`
	StreamPre  string `thrift:"stream_pre,5" db:"stream_pre" json:"stream_pre"`
	StreamSuf  string `thrift:"stream_suf,6" db:"stream_suf" json:"stream_suf"`
	Extra      string `thrift:"extra,7" db:"extra" json:"extra"`
}

func NewPublishAddrResponse() *PublishAddrResponse {
	return &PublishAddrResponse{}
}

func (p *PublishAddrResponse) GetRescode() int64 {
	return p.Rescode
}

func (p *PublishAddrResponse) GetLink() int16 {
	return p.Link
}

func (p *PublishAddrResponse) GetPublishPre() string {
	return p.PublishPre
}

func (p *PublishAddrResponse) GetPublishSuf() string {
	return p.PublishSuf
}

func (p *PublishAddrResponse) GetStreamPre() string {
	return p.StreamPre
}

func (p *PublishAddrResponse) GetStreamSuf() string {
	return p.StreamSuf
}

func (p *PublishAddrResponse) GetExtra() string {
	return p.Extra
}
func (p *PublishAddrResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PublishAddrResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rescode = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Link = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PublishPre = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PublishSuf = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StreamPre = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StreamSuf = v
	}
	return nil
}

func (p *PublishAddrResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Extra = v
	}
	return nil
}

func (p *PublishAddrResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublishAddrResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PublishAddrResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("link", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Link)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.link (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publish_pre", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:publish_pre: ", p), err)
	}
	if err := oprot.WriteString(string(p.PublishPre)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publish_pre (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:publish_pre: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publish_suf", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:publish_suf: ", p), err)
	}
	if err := oprot.WriteString(string(p.PublishSuf)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publish_suf (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:publish_suf: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream_pre", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stream_pre: ", p), err)
	}
	if err := oprot.WriteString(string(p.StreamPre)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stream_pre (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stream_pre: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream_suf", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stream_suf: ", p), err)
	}
	if err := oprot.WriteString(string(p.StreamSuf)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stream_suf (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stream_suf: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extra: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extra)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extra (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extra: ", p), err)
	}
	return err
}

func (p *PublishAddrResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishAddrResponse(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - PublishAddr
//  - StreamAddr
//  - StreamAddrCdn
type LinkSlotResponse struct {
	Rescode       int64  `thrift:"rescode,1" db:"rescode" json:"rescode"`
	PublishAddr   string `thrift:"publish_addr,2" db:"publish_addr" json:"publish_addr"`
	StreamAddr    string `thrift:"stream_addr,3" db:"stream_addr" json:"stream_addr"`
	StreamAddrCdn string `thrift:"stream_addr_cdn,4" db:"stream_addr_cdn" json:"stream_addr_cdn"`
}

func NewLinkSlotResponse() *LinkSlotResponse {
	return &LinkSlotResponse{}
}

func (p *LinkSlotResponse) GetRescode() int64 {
	return p.Rescode
}

func (p *LinkSlotResponse) GetPublishAddr() string {
	return p.PublishAddr
}

func (p *LinkSlotResponse) GetStreamAddr() string {
	return p.StreamAddr
}

func (p *LinkSlotResponse) GetStreamAddrCdn() string {
	return p.StreamAddrCdn
}
func (p *LinkSlotResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LinkSlotResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rescode = v
	}
	return nil
}

func (p *LinkSlotResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PublishAddr = v
	}
	return nil
}

func (p *LinkSlotResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StreamAddr = v
	}
	return nil
}

func (p *LinkSlotResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StreamAddrCdn = v
	}
	return nil
}

func (p *LinkSlotResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkSlotResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LinkSlotResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *LinkSlotResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publish_addr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publish_addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.PublishAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publish_addr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publish_addr: ", p), err)
	}
	return err
}

func (p *LinkSlotResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream_addr", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stream_addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.StreamAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stream_addr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stream_addr: ", p), err)
	}
	return err
}

func (p *LinkSlotResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream_addr_cdn", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stream_addr_cdn: ", p), err)
	}
	if err := oprot.WriteString(string(p.StreamAddrCdn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stream_addr_cdn (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stream_addr_cdn: ", p), err)
	}
	return err
}

func (p *LinkSlotResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkSlotResponse(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - LinkAddr
//  - Extra
type LinkAddrResponse struct {
	Rescode  int64  `thrift:"rescode,1" db:"rescode" json:"rescode"`
	LinkAddr string `thrift:"link_addr,2" db:"link_addr" json:"link_addr"`
	Extra    string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewLinkAddrResponse() *LinkAddrResponse {
	return &LinkAddrResponse{}
}

func (p *LinkAddrResponse) GetRescode() int64 {
	return p.Rescode
}

func (p *LinkAddrResponse) GetLinkAddr() string {
	return p.LinkAddr
}

func (p *LinkAddrResponse) GetExtra() string {
	return p.Extra
}
func (p *LinkAddrResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LinkAddrResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rescode = v
	}
	return nil
}

func (p *LinkAddrResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LinkAddr = v
	}
	return nil
}

func (p *LinkAddrResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Extra = v
	}
	return nil
}

func (p *LinkAddrResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkAddrResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LinkAddrResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *LinkAddrResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("link_addr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link_addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.link_addr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link_addr: ", p), err)
	}
	return err
}

func (p *LinkAddrResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extra)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extra (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err)
	}
	return err
}

func (p *LinkAddrResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkAddrResponse(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Link
//  - Multi
//  - ForceLink
type UserSettingResponse struct {
	Rescode   int64 `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Link      int16 `thrift:"link,2" db:"link" json:"link"`
	Multi     int16 `thrift:"multi,3" db:"multi" json:"multi"`
	ForceLink int16 `thrift:"force_link,4" db:"force_link" json:"force_link"`
}

func NewUserSettingResponse() *UserSettingResponse {
	return &UserSettingResponse{}
}

func (p *UserSettingResponse) GetRescode() int64 {
	return p.Rescode
}

func (p *UserSettingResponse) GetLink() int16 {
	return p.Link
}

func (p *UserSettingResponse) GetMulti() int16 {
	return p.Multi
}

func (p *UserSettingResponse) GetForceLink() int16 {
	return p.ForceLink
}
func (p *UserSettingResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserSettingResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rescode = v
	}
	return nil
}

func (p *UserSettingResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Link = v
	}
	return nil
}

func (p *UserSettingResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Multi = v
	}
	return nil
}

func (p *UserSettingResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ForceLink = v
	}
	return nil
}

func (p *UserSettingResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserSettingResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserSettingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *UserSettingResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("link", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Link)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.link (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link: ", p), err)
	}
	return err
}

func (p *UserSettingResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("multi", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:multi: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Multi)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.multi (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:multi: ", p), err)
	}
	return err
}

func (p *UserSettingResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("force_link", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:force_link: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ForceLink)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.force_link (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:force_link: ", p), err)
	}
	return err
}

func (p *UserSettingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSettingResponse(%+v)", *p)
}

type DispatchService interface {
	// Parameters:
	//  - Request
	GetPublishAddr(request *PublishRequest) (r *PublishAddrResponse, err error)
	// Parameters:
	//  - Request
	GetLinkSlotAddr(request *LinkSlotRequest) (r *LinkSlotResponse, err error)
	// Parameters:
	//  - Request
	GetLinkAddr(request *LinkAddrRequest) (r *LinkAddrResponse, err error)
	// Parameters:
	//  - Request
	GetUserSetting(request *UserSettingRequest) (r *UserSettingResponse, err error)
	// Parameters:
	//  - Request
	GetStreamPullAddr(request *StreamPullAddrRequest) (r *StreamPullAddrResponse, err error)
}

type DispatchServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDispatchServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DispatchServiceClient {
	return &DispatchServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDispatchServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DispatchServiceClient {
	return &DispatchServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Request
func (p *DispatchServiceClient) GetPublishAddr(request *PublishRequest) (r *PublishAddrResponse, err error) {
	if err = p.sendGetPublishAddr(request); err != nil {
		return
	}
	return p.recvGetPublishAddr()
}

func (p *DispatchServiceClient) sendGetPublishAddr(request *PublishRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPublishAddr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchServiceGetPublishAddrArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchServiceClient) recvGetPublishAddr() (value *PublishAddrResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getPublishAddr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPublishAddr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPublishAddr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPublishAddr failed: invalid message type")
		return
	}
	result := DispatchServiceGetPublishAddrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *DispatchServiceClient) GetLinkSlotAddr(request *LinkSlotRequest) (r *LinkSlotResponse, err error) {
	if err = p.sendGetLinkSlotAddr(request); err != nil {
		return
	}
	return p.recvGetLinkSlotAddr()
}

func (p *DispatchServiceClient) sendGetLinkSlotAddr(request *LinkSlotRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLinkSlotAddr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchServiceGetLinkSlotAddrArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchServiceClient) recvGetLinkSlotAddr() (value *LinkSlotResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLinkSlotAddr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLinkSlotAddr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLinkSlotAddr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLinkSlotAddr failed: invalid message type")
		return
	}
	result := DispatchServiceGetLinkSlotAddrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *DispatchServiceClient) GetLinkAddr(request *LinkAddrRequest) (r *LinkAddrResponse, err error) {
	if err = p.sendGetLinkAddr(request); err != nil {
		return
	}
	return p.recvGetLinkAddr()
}

func (p *DispatchServiceClient) sendGetLinkAddr(request *LinkAddrRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLinkAddr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchServiceGetLinkAddrArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchServiceClient) recvGetLinkAddr() (value *LinkAddrResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLinkAddr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLinkAddr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLinkAddr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLinkAddr failed: invalid message type")
		return
	}
	result := DispatchServiceGetLinkAddrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *DispatchServiceClient) GetUserSetting(request *UserSettingRequest) (r *UserSettingResponse, err error) {
	if err = p.sendGetUserSetting(request); err != nil {
		return
	}
	return p.recvGetUserSetting()
}

func (p *DispatchServiceClient) sendGetUserSetting(request *UserSettingRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchServiceGetUserSettingArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchServiceClient) recvGetUserSetting() (value *UserSettingResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserSetting" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserSetting failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserSetting failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserSetting failed: invalid message type")
		return
	}
	result := DispatchServiceGetUserSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *DispatchServiceClient) GetStreamPullAddr(request *StreamPullAddrRequest) (r *StreamPullAddrResponse, err error) {
	if err = p.sendGetStreamPullAddr(request); err != nil {
		return
	}
	return p.recvGetStreamPullAddr()
}

func (p *DispatchServiceClient) sendGetStreamPullAddr(request *StreamPullAddrRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getStreamPullAddr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchServiceGetStreamPullAddrArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchServiceClient) recvGetStreamPullAddr() (value *StreamPullAddrResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getStreamPullAddr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getStreamPullAddr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getStreamPullAddr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStreamPullAddr failed: invalid message type")
		return
	}
	result := DispatchServiceGetStreamPullAddrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type DispatchServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DispatchService
}

func (p *DispatchServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DispatchServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DispatchServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDispatchServiceProcessor(handler DispatchService) *DispatchServiceProcessor {

	self12 := &DispatchServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["getPublishAddr"] = &dispatchServiceProcessorGetPublishAddr{handler: handler}
	self12.processorMap["getLinkSlotAddr"] = &dispatchServiceProcessorGetLinkSlotAddr{handler: handler}
	self12.processorMap["getLinkAddr"] = &dispatchServiceProcessorGetLinkAddr{handler: handler}
	self12.processorMap["getUserSetting"] = &dispatchServiceProcessorGetUserSetting{handler: handler}
	self12.processorMap["getStreamPullAddr"] = &dispatchServiceProcessorGetStreamPullAddr{handler: handler}
	return self12
}

func (p *DispatchServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type dispatchServiceProcessorGetPublishAddr struct {
	handler DispatchService
}

func (p *dispatchServiceProcessorGetPublishAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchServiceGetPublishAddrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPublishAddr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchServiceGetPublishAddrResult{}
	var retval *PublishAddrResponse
	var err2 error
	if retval, err2 = p.handler.GetPublishAddr(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *DispatchThriftException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublishAddr: "+err2.Error())
			oprot.WriteMessageBegin("getPublishAddr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPublishAddr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchServiceProcessorGetLinkSlotAddr struct {
	handler DispatchService
}

func (p *dispatchServiceProcessorGetLinkSlotAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchServiceGetLinkSlotAddrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkSlotAddr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchServiceGetLinkSlotAddrResult{}
	var retval *LinkSlotResponse
	var err2 error
	if retval, err2 = p.handler.GetLinkSlotAddr(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *DispatchThriftException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkSlotAddr: "+err2.Error())
			oprot.WriteMessageBegin("getLinkSlotAddr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLinkSlotAddr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchServiceProcessorGetLinkAddr struct {
	handler DispatchService
}

func (p *dispatchServiceProcessorGetLinkAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchServiceGetLinkAddrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkAddr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchServiceGetLinkAddrResult{}
	var retval *LinkAddrResponse
	var err2 error
	if retval, err2 = p.handler.GetLinkAddr(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *DispatchThriftException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkAddr: "+err2.Error())
			oprot.WriteMessageBegin("getLinkAddr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLinkAddr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchServiceProcessorGetUserSetting struct {
	handler DispatchService
}

func (p *dispatchServiceProcessorGetUserSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchServiceGetUserSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchServiceGetUserSettingResult{}
	var retval *UserSettingResponse
	var err2 error
	if retval, err2 = p.handler.GetUserSetting(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *DispatchThriftException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserSetting: "+err2.Error())
			oprot.WriteMessageBegin("getUserSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchServiceProcessorGetStreamPullAddr struct {
	handler DispatchService
}

func (p *dispatchServiceProcessorGetStreamPullAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchServiceGetStreamPullAddrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getStreamPullAddr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchServiceGetStreamPullAddrResult{}
	var retval *StreamPullAddrResponse
	var err2 error
	if retval, err2 = p.handler.GetStreamPullAddr(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *DispatchThriftException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStreamPullAddr: "+err2.Error())
			oprot.WriteMessageBegin("getStreamPullAddr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getStreamPullAddr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type DispatchServiceGetPublishAddrArgs struct {
	Request *PublishRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDispatchServiceGetPublishAddrArgs() *DispatchServiceGetPublishAddrArgs {
	return &DispatchServiceGetPublishAddrArgs{}
}

var DispatchServiceGetPublishAddrArgs_Request_DEFAULT *PublishRequest

func (p *DispatchServiceGetPublishAddrArgs) GetRequest() *PublishRequest {
	if !p.IsSetRequest() {
		return DispatchServiceGetPublishAddrArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DispatchServiceGetPublishAddrArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DispatchServiceGetPublishAddrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &PublishRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublishAddr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DispatchServiceGetPublishAddrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetPublishAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchServiceGetPublishAddrResult struct {
	Success *PublishAddrResponse     `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *DispatchThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewDispatchServiceGetPublishAddrResult() *DispatchServiceGetPublishAddrResult {
	return &DispatchServiceGetPublishAddrResult{}
}

var DispatchServiceGetPublishAddrResult_Success_DEFAULT *PublishAddrResponse

func (p *DispatchServiceGetPublishAddrResult) GetSuccess() *PublishAddrResponse {
	if !p.IsSetSuccess() {
		return DispatchServiceGetPublishAddrResult_Success_DEFAULT
	}
	return p.Success
}

var DispatchServiceGetPublishAddrResult_Ex_DEFAULT *DispatchThriftException

func (p *DispatchServiceGetPublishAddrResult) GetEx() *DispatchThriftException {
	if !p.IsSetEx() {
		return DispatchServiceGetPublishAddrResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchServiceGetPublishAddrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchServiceGetPublishAddrResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchServiceGetPublishAddrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PublishAddrResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &DispatchThriftException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublishAddr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetPublishAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetPublishAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetPublishAddrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetPublishAddrResult(%+v)", *p)
}

// Attributes:
//  - Request
type DispatchServiceGetLinkSlotAddrArgs struct {
	Request *LinkSlotRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDispatchServiceGetLinkSlotAddrArgs() *DispatchServiceGetLinkSlotAddrArgs {
	return &DispatchServiceGetLinkSlotAddrArgs{}
}

var DispatchServiceGetLinkSlotAddrArgs_Request_DEFAULT *LinkSlotRequest

func (p *DispatchServiceGetLinkSlotAddrArgs) GetRequest() *LinkSlotRequest {
	if !p.IsSetRequest() {
		return DispatchServiceGetLinkSlotAddrArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DispatchServiceGetLinkSlotAddrArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DispatchServiceGetLinkSlotAddrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &LinkSlotRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkSlotAddr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DispatchServiceGetLinkSlotAddrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetLinkSlotAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchServiceGetLinkSlotAddrResult struct {
	Success *LinkSlotResponse        `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *DispatchThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewDispatchServiceGetLinkSlotAddrResult() *DispatchServiceGetLinkSlotAddrResult {
	return &DispatchServiceGetLinkSlotAddrResult{}
}

var DispatchServiceGetLinkSlotAddrResult_Success_DEFAULT *LinkSlotResponse

func (p *DispatchServiceGetLinkSlotAddrResult) GetSuccess() *LinkSlotResponse {
	if !p.IsSetSuccess() {
		return DispatchServiceGetLinkSlotAddrResult_Success_DEFAULT
	}
	return p.Success
}

var DispatchServiceGetLinkSlotAddrResult_Ex_DEFAULT *DispatchThriftException

func (p *DispatchServiceGetLinkSlotAddrResult) GetEx() *DispatchThriftException {
	if !p.IsSetEx() {
		return DispatchServiceGetLinkSlotAddrResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchServiceGetLinkSlotAddrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LinkSlotResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &DispatchThriftException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkSlotAddr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetLinkSlotAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetLinkSlotAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetLinkSlotAddrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetLinkSlotAddrResult(%+v)", *p)
}

// Attributes:
//  - Request
type DispatchServiceGetLinkAddrArgs struct {
	Request *LinkAddrRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDispatchServiceGetLinkAddrArgs() *DispatchServiceGetLinkAddrArgs {
	return &DispatchServiceGetLinkAddrArgs{}
}

var DispatchServiceGetLinkAddrArgs_Request_DEFAULT *LinkAddrRequest

func (p *DispatchServiceGetLinkAddrArgs) GetRequest() *LinkAddrRequest {
	if !p.IsSetRequest() {
		return DispatchServiceGetLinkAddrArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DispatchServiceGetLinkAddrArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DispatchServiceGetLinkAddrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &LinkAddrRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkAddr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DispatchServiceGetLinkAddrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetLinkAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchServiceGetLinkAddrResult struct {
	Success *LinkAddrResponse        `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *DispatchThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewDispatchServiceGetLinkAddrResult() *DispatchServiceGetLinkAddrResult {
	return &DispatchServiceGetLinkAddrResult{}
}

var DispatchServiceGetLinkAddrResult_Success_DEFAULT *LinkAddrResponse

func (p *DispatchServiceGetLinkAddrResult) GetSuccess() *LinkAddrResponse {
	if !p.IsSetSuccess() {
		return DispatchServiceGetLinkAddrResult_Success_DEFAULT
	}
	return p.Success
}

var DispatchServiceGetLinkAddrResult_Ex_DEFAULT *DispatchThriftException

func (p *DispatchServiceGetLinkAddrResult) GetEx() *DispatchThriftException {
	if !p.IsSetEx() {
		return DispatchServiceGetLinkAddrResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchServiceGetLinkAddrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchServiceGetLinkAddrResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchServiceGetLinkAddrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LinkAddrResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &DispatchThriftException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkAddr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetLinkAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetLinkAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetLinkAddrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetLinkAddrResult(%+v)", *p)
}

// Attributes:
//  - Request
type DispatchServiceGetUserSettingArgs struct {
	Request *UserSettingRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDispatchServiceGetUserSettingArgs() *DispatchServiceGetUserSettingArgs {
	return &DispatchServiceGetUserSettingArgs{}
}

var DispatchServiceGetUserSettingArgs_Request_DEFAULT *UserSettingRequest

func (p *DispatchServiceGetUserSettingArgs) GetRequest() *UserSettingRequest {
	if !p.IsSetRequest() {
		return DispatchServiceGetUserSettingArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DispatchServiceGetUserSettingArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DispatchServiceGetUserSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &UserSettingRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DispatchServiceGetUserSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetUserSettingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchServiceGetUserSettingResult struct {
	Success *UserSettingResponse     `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *DispatchThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewDispatchServiceGetUserSettingResult() *DispatchServiceGetUserSettingResult {
	return &DispatchServiceGetUserSettingResult{}
}

var DispatchServiceGetUserSettingResult_Success_DEFAULT *UserSettingResponse

func (p *DispatchServiceGetUserSettingResult) GetSuccess() *UserSettingResponse {
	if !p.IsSetSuccess() {
		return DispatchServiceGetUserSettingResult_Success_DEFAULT
	}
	return p.Success
}

var DispatchServiceGetUserSettingResult_Ex_DEFAULT *DispatchThriftException

func (p *DispatchServiceGetUserSettingResult) GetEx() *DispatchThriftException {
	if !p.IsSetEx() {
		return DispatchServiceGetUserSettingResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchServiceGetUserSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchServiceGetUserSettingResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchServiceGetUserSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserSettingResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &DispatchThriftException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetUserSettingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetUserSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetUserSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetUserSettingResult(%+v)", *p)
}

// Attributes:
//  - Request
type DispatchServiceGetStreamPullAddrArgs struct {
	Request *StreamPullAddrRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDispatchServiceGetStreamPullAddrArgs() *DispatchServiceGetStreamPullAddrArgs {
	return &DispatchServiceGetStreamPullAddrArgs{}
}

var DispatchServiceGetStreamPullAddrArgs_Request_DEFAULT *StreamPullAddrRequest

func (p *DispatchServiceGetStreamPullAddrArgs) GetRequest() *StreamPullAddrRequest {
	if !p.IsSetRequest() {
		return DispatchServiceGetStreamPullAddrArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DispatchServiceGetStreamPullAddrArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DispatchServiceGetStreamPullAddrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &StreamPullAddrRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStreamPullAddr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DispatchServiceGetStreamPullAddrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetStreamPullAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchServiceGetStreamPullAddrResult struct {
	Success *StreamPullAddrResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *DispatchThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewDispatchServiceGetStreamPullAddrResult() *DispatchServiceGetStreamPullAddrResult {
	return &DispatchServiceGetStreamPullAddrResult{}
}

var DispatchServiceGetStreamPullAddrResult_Success_DEFAULT *StreamPullAddrResponse

func (p *DispatchServiceGetStreamPullAddrResult) GetSuccess() *StreamPullAddrResponse {
	if !p.IsSetSuccess() {
		return DispatchServiceGetStreamPullAddrResult_Success_DEFAULT
	}
	return p.Success
}

var DispatchServiceGetStreamPullAddrResult_Ex_DEFAULT *DispatchThriftException

func (p *DispatchServiceGetStreamPullAddrResult) GetEx() *DispatchThriftException {
	if !p.IsSetEx() {
		return DispatchServiceGetStreamPullAddrResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchServiceGetStreamPullAddrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchServiceGetStreamPullAddrResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchServiceGetStreamPullAddrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &StreamPullAddrResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &DispatchThriftException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStreamPullAddr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchServiceGetStreamPullAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetStreamPullAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchServiceGetStreamPullAddrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchServiceGetStreamPullAddrResult(%+v)", *p)
}
